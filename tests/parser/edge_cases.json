[
  {
    "test_name": "single_token_query",
    "description": "Query with only one token",
    "input": "prof",
    "should_succeed": false,
    "expected_error_type": "ExpectedAfter",
    "expected_error_message": "After 'search field', please add one of: 'is', 'equals', 'contains', 'has', 'starts with', 'ends with'",
    "expected_problematic_tokens": []
  },
  {
    "test_name": "two_token_query",
    "description": "Query with only two tokens (missing value)",
    "input": "prof is",
    "should_succeed": false,
    "expected_error_type": "MissingToken",
    "expected_error_message": "Missing: Expected identifier",
    "expected_problematic_tokens": []
  },
  {
    "test_name": "invalid_entity_start",
    "description": "Query starting with invalid entity",
    "input": "invalid_entity is value",
    "should_succeed": false,
    "expected_error_type": "InvalidContext",
    "expected_error_message": "'invalid_entity' is not valid here. Try: 'professor', 'course', 'subject', 'title', 'section', 'number', 'description', 'credit', 'prerequisites', 'corequisites', 'enrollment', 'campus', 'meeting'",
    "expected_problematic_tokens": [
      {
        "lexeme": "invalid_entity",
        "start": 0,
        "end": 14
      }
    ]
  },
  {
    "test_name": "nested_parentheses_error",
    "description": "Query with nested parentheses error",
    "input": "((prof is Alan)",
    "should_succeed": false,
    "expected_error_type": "MissingToken",
    "expected_error_message": "Missing: Expected closing parenthesis",
    "expected_problematic_tokens": []
  },
  {
    "test_name": "invalid_operator_sequence",
    "description": "Query with invalid operator sequence",
    "input": "prof is = Alan",
    "should_succeed": false,
    "expected_error_type": "InvalidContext",
    "expected_error_message": "'=' is not valid here. Try: 'some text', 'text in quotes', 'a name or value'",
    "expected_problematic_tokens": [
      {
        "lexeme": "=",
        "start": 8,
        "end": 9
      }
    ]
  },
  {
    "test_name": "missing_operator",
    "description": "Query missing operator between entity and value",
    "input": "prof Alan",
    "should_succeed": false,
    "expected_error_type": "InvalidContext",
    "expected_error_message": "'Alan' is not valid here. Try: 'is', 'equals', 'contains', 'has', 'starts with', 'ends with'",
    "expected_problematic_tokens": [
      {
        "lexeme": "Alan",
        "start": 5,
        "end": 9
      }
    ]
  },
  {
    "test_name": "invalid_logical_operator_placement",
    "description": "Query with logical operator at wrong position",
    "input": "and prof is Alan",
    "should_succeed": false,
    "expected_error_type": "InvalidContext",
    "expected_error_message": "'and' is not valid here. Try: 'professor', 'course', 'subject', 'title', 'section', 'number', 'description', 'credit', 'prerequisites', 'corequisites', 'enrollment', 'campus', 'meeting'",
    "expected_problematic_tokens": [
      {
        "lexeme": "and",
        "start": 0,
        "end": 3
      }
    ]
  },
  {
    "test_name": "trailing_logical_operator",
    "description": "Query ending with logical operator",
    "input": "prof is Alan or",
    "should_succeed": false,
    "expected_error_type": "ExpectedAfter",
    "expected_error_message": "Please start with one of: 'professor', 'course', 'subject', 'title', 'section'",
    "expected_problematic_tokens": []
  },
  {
    "test_name": "consecutive_logical_operators",
    "description": "Query with consecutive logical operators",
    "input": "prof is Alan and and course contains CS",
    "should_succeed": false,
    "expected_error_type": "InvalidContext",
    "expected_error_message": "'and' is not valid here. Try: 'professor', 'course', 'subject', 'title', 'section', 'number', 'description', 'credit', 'prerequisites', 'corequisites', 'enrollment', 'campus', 'meeting'",
    "expected_problematic_tokens": [
      {
        "lexeme": "and",
        "start": 17,
        "end": 20
      }
    ]
  },
  {
    "test_name": "invalid_field_name",
    "description": "Query with invalid field name",
    "input": "prof invalid_field is value",
    "should_succeed": false,
    "expected_error_type": "InvalidContext",
    "expected_error_message": "'invalid_field' is not valid here. Try: 'is', 'equals', 'contains', 'has', 'starts with', 'ends with'",
    "expected_problematic_tokens": [
      {
        "lexeme": "invalid_field",
        "start": 5,
        "end": 18
      }
    ]
  }
] 