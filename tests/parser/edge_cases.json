[
  {
    "test_name": "single_token_query",
    "description": "Query with only one token",
    "input": "prof",
    "should_succeed": false,
    "expected_error_type": "MissingToken",
    "expected_error_message": "operator and value",
    "expected_problematic_tokens": [
      {
        "lexeme": "prof",
        "start": 0,
        "end": 4
      }
    ]
  },
  {
    "test_name": "two_token_query",
    "description": "Query with only two tokens (missing value)",
    "input": "prof is",
    "should_succeed": false,
    "expected_error_type": "MissingToken",
    "expected_error_message": "value",
    "expected_problematic_tokens": [
      {
        "lexeme": "prof",
        "start": 0,
        "end": 4
      },
      {
        "lexeme": "is",
        "start": 5,
        "end": 7
      }
    ]
  },
  {
    "test_name": "invalid_entity_start",
    "description": "Query starting with invalid entity",
    "input": "invalid_entity is value",
    "should_succeed": false,
    "expected_error_type": "InvalidIdentifier",
    "expected_error_message": "invalid_entity",
    "expected_problematic_tokens": [
      {
        "lexeme": "invalid_entity",
        "start": 0,
        "end": 15
      }
    ]
  },
  {
    "test_name": "nested_parentheses_error",
    "description": "Query with nested parentheses error",
    "input": "((prof is Alan)",
    "should_succeed": false,
    "expected_error_type": "UnclosedParenthesis",
    "expected_error_message": null,
    "expected_problematic_tokens": [
      {
        "lexeme": "(",
        "start": 0,
        "end": 1
      },
      {
        "lexeme": "(",
        "start": 1,
        "end": 2
      },
      {
        "lexeme": "prof",
        "start": 2,
        "end": 6
      },
      {
        "lexeme": "is",
        "start": 7,
        "end": 9
      },
      {
        "lexeme": "Alan",
        "start": 10,
        "end": 14
      }
    ]
  },
  {
    "test_name": "invalid_operator_sequence",
    "description": "Query with invalid operator sequence",
    "input": "prof is = Alan",
    "should_succeed": false,
    "expected_error_type": "UnexpectedToken",
    "expected_error_message": "=",
    "expected_problematic_tokens": [
      {
        "lexeme": "prof",
        "start": 0,
        "end": 4
      },
      {
        "lexeme": "is",
        "start": 5,
        "end": 7
      },
      {
        "lexeme": "=",
        "start": 8,
        "end": 9
      }
    ]
  },
  {
    "test_name": "missing_operator",
    "description": "Query missing operator between entity and value",
    "input": "prof Alan",
    "should_succeed": false,
    "expected_error_type": "MissingToken",
    "expected_error_message": "operator",
    "expected_problematic_tokens": [
      {
        "lexeme": "prof",
        "start": 0,
        "end": 4
      },
      {
        "lexeme": "Alan",
        "start": 5,
        "end": 9
      }
    ]
  },
  {
    "test_name": "invalid_logical_operator_placement",
    "description": "Query with logical operator at wrong position",
    "input": "and prof is Alan",
    "should_succeed": false,
    "expected_error_type": "UnexpectedToken",
    "expected_error_message": "and",
    "expected_problematic_tokens": [
      {
        "lexeme": "and",
        "start": 0,
        "end": 3
      }
    ]
  },
  {
    "test_name": "trailing_logical_operator",
    "description": "Query ending with logical operator",
    "input": "prof is Alan or",
    "should_succeed": false,
    "expected_error_type": "MissingToken",
    "expected_error_message": "expression after 'or'",
    "expected_problematic_tokens": [
      {
        "lexeme": "or",
        "start": 12,
        "end": 14
      }
    ]
  },
  {
    "test_name": "consecutive_logical_operators",
    "description": "Query with consecutive logical operators",
    "input": "prof is Alan and and course contains CS",
    "should_succeed": false,
    "expected_error_type": "UnexpectedToken",
    "expected_error_message": "and",
    "expected_problematic_tokens": [
      {
        "lexeme": "and",
        "start": 12,
        "end": 15
      },
      {
        "lexeme": "and",
        "start": 16,
        "end": 19
      }
    ]
  },
  {
    "test_name": "invalid_field_name",
    "description": "Query with invalid field name",
    "input": "prof invalid_field is value",
    "should_succeed": false,
    "expected_error_type": "InvalidIdentifier",
    "expected_error_message": "invalid_field",
    "expected_problematic_tokens": [
      {
        "lexeme": "prof",
        "start": 0,
        "end": 4
      },
      {
        "lexeme": "invalid_field",
        "start": 5,
        "end": 17
      }
    ]
  }
] 