[
  {
    "test_name": "missing_value",
    "description": "Query missing the value after 'is'",
    "input": "prof is",
    "should_succeed": false,
    "expected_error_type": "MissingToken",
    "expected_error_message": "value",
    "expected_problematic_tokens": [
      {
        "lexeme": "prof",
        "start": 0,
        "end": 4
      },
      {
        "lexeme": "is",
        "start": 5,
        "end": 7
      }
    ]
  },
  {
    "test_name": "missing_entity",
    "description": "Query missing the entity before 'is'",
    "input": "is Alan",
    "should_succeed": false,
    "expected_error_type": "MissingToken",
    "expected_error_message": "entity",
    "expected_problematic_tokens": [
      {
        "lexeme": "is",
        "start": 0,
        "end": 2
      },
      {
        "lexeme": "Alan",
        "start": 3,
        "end": 7
      }
    ]
  },
  {
    "test_name": "incomplete_and_clause",
    "description": "Query with incomplete AND clause",
    "input": "prof is Alan and",
    "should_succeed": false,
    "expected_error_type": "MissingToken",
    "expected_error_message": "expression after 'and'",
    "expected_problematic_tokens": [
      {
        "lexeme": "and",
        "start": 12,
        "end": 15
      }
    ]
  },
  {
    "test_name": "unclosed_parenthesis",
    "description": "Query with unclosed parenthesis",
    "input": "(prof is Alan",
    "should_succeed": false,
    "expected_error_type": "UnclosedParenthesis",
    "expected_error_message": null,
    "expected_problematic_tokens": [
      {
        "lexeme": "(",
        "start": 0,
        "end": 1
      },
      {
        "lexeme": "prof",
        "start": 1,
        "end": 5
      },
      {
        "lexeme": "is",
        "start": 6,
        "end": 8
      },
      {
        "lexeme": "Alan",
        "start": 9,
        "end": 13
      }
    ]
  },
  {
    "test_name": "invalid_field_for_entity",
    "description": "Query with invalid field for entity (email is not a valid field for prof)",
    "input": "prof email contains @university.edu",
    "should_succeed": false,
    "expected_error_type": "InvalidIdentifier",
    "expected_error_message": "email",
    "expected_problematic_tokens": [
      {
        "lexeme": "prof",
        "start": 0,
        "end": 4
      },
      {
        "lexeme": "email",
        "start": 5,
        "end": 10
      }
    ]
  },
  {
    "test_name": "invalid_numeric_operator",
    "description": "Using string operator with numeric field",
    "input": "credit hours contains \"three\"",
    "should_succeed": false,
    "expected_error_type": "InvalidOperator",
    "expected_error_message": "contains",
    "expected_problematic_tokens": [
      {
        "lexeme": "credit",
        "start": 0,
        "end": 6
      },
      {
        "lexeme": "hours",
        "start": 7,
        "end": 12
      },
      {
        "lexeme": "contains",
        "start": 13,
        "end": 21
      }
    ]
  },
  {
    "test_name": "invalid_string_operator",
    "description": "Using numeric operator with string field",
    "input": "course > CS",
    "should_succeed": false,
    "expected_error_type": "InvalidOperator",
    "expected_error_message": ">",
    "expected_problematic_tokens": [
      {
        "lexeme": "course",
        "start": 0,
        "end": 6
      },
      {
        "lexeme": ">",
        "start": 7,
        "end": 8
      }
    ]
  },
  {
    "test_name": "malformed_day_query",
    "description": "Invalid day query syntax",
    "input": "monday contains CS",
    "should_succeed": false,
    "expected_error_type": "InvalidExpression",
    "expected_error_message": "monday contains CS",
    "expected_problematic_tokens": [
      {
        "lexeme": "monday",
        "start": 0,
        "end": 6
      },
      {
        "lexeme": "contains",
        "start": 7,
        "end": 15
      }
    ]
  },
  {
    "test_name": "empty_query",
    "description": "Completely empty query",
    "input": "",
    "should_succeed": false,
    "expected_error_type": "EmptyQuery",
    "expected_error_message": null,
    "expected_problematic_tokens": []
  },
  {
    "test_name": "whitespace_only",
    "description": "Query with only whitespace",
    "input": "   ",
    "should_succeed": false,
    "expected_error_type": "EmptyQuery",
    "expected_error_message": null,
    "expected_problematic_tokens": []
  }
] 