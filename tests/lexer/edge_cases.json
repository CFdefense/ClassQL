[
    {
        "test_name": "Empty String",
        "description": "Test handling of empty input",
        "code": "",
        "result": []
    },
    {
        "test_name": "Only Whitespace",
        "description": "Test input with only whitespace characters",
        "code": "   \t\n  ",
        "result": []
    },
    {
        "test_name": "Single Character Tokens",
        "description": "Test single character operators",
        "code": "= < > !",
        "result": [
            {"type": "T_EQUALS", "content": "="},
            {"type": "T_LESSTHAN", "content": "<"},
            {"type": "T_GREATERTHAN", "content": ">"},
            {"type": "T_EXCLAMATION", "content": "!"}
        ]
    },
    {
        "test_name": "Numbers at Boundaries",
        "description": "Test edge case numbers",
        "code": "0 999999 1",
        "result": [
            {"type": "T_INTEGER", "content": "0"},
            {"type": "T_INTEGER", "content": "999999"},
            {"type": "T_INTEGER", "content": "1"}
        ]
    },
    {
        "test_name": "Empty Quoted String",
        "description": "Test empty quoted strings",
        "code": "title = \"\"",
        "result": [
            {"type": "T_TITLE", "content": "title"},
            {"type": "T_EQUALS", "content": "="},
            {"type": "T_STRING", "content": "\"\""}
        ]
    },
    {
        "test_name": "String with Spaces",
        "description": "Test quoted strings containing spaces",
        "code": "\"Computer Science 101\" \"Data Structures and Algorithms\"",
        "result": [
            {"type": "T_STRING", "content": "\"Computer Science 101\""},
            {"type": "T_STRING", "content": "\"Data Structures and Algorithms\""}
        ]
    },
    {
        "test_name": "Case Sensitivity",
        "description": "Test case sensitivity of keywords",
        "code": "Term PROF Course subject SUB",
        "result": [
            {"type": "T_TERM", "content": "Term"},
            {"type": "T_PROF", "content": "PROF"},
            {"type": "T_COURSE", "content": "Course"},
            {"type": "T_SUBJECT", "content": "subject"},
            {"type": "T_SUBJECT", "content": "SUB"}
        ]
    },
    {
        "test_name": "Adjacent Operators",
        "description": "Test adjacent operators without spaces",
        "code": ">=<=!=",
        "result": [
            {"type": "T_GREATEREQUAL", "content": ">="},
            {"type": "T_LESSEQUAL", "content": "<="},
            {"type": "T_NOTEQUALS", "content": "!="}
        ]
    },
    {
        "test_name": "Adjacent Parentheses",
        "description": "Test adjacent parentheses without spaces",
        "code": "()((())",
        "result": [
            {"type": "T_LEFTPAREN", "content": "("},
            {"type": "T_RIGHTPAREN", "content": ")"},
            {"type": "T_LEFTPAREN", "content": "("},
            {"type": "T_LEFTPAREN", "content": "("},
            {"type": "T_LEFTPAREN", "content": "("},
            {"type": "T_RIGHTPAREN", "content": ")"},
            {"type": "T_RIGHTPAREN", "content": ")"}
        ]
    },
    {
        "test_name": "Parentheses with Adjacent Operators",
        "description": "Test parentheses adjacent to operators without spaces",
        "code": "(prof=Alan)and(course=CS)",
        "result": [
            {"type": "T_LEFTPAREN", "content": "("},
            {"type": "T_PROF", "content": "prof"},
            {"type": "T_EQUALS", "content": "="},
            {"type": "T_IDENTIFIER", "content": "Alan"},
            {"type": "T_RIGHTPAREN", "content": ")"},
            {"type": "T_AND", "content": "and"},
            {"type": "T_LEFTPAREN", "content": "("},
            {"type": "T_COURSE", "content": "course"},
            {"type": "T_EQUALS", "content": "="},
            {"type": "T_IDENTIFIER", "content": "CS"},
            {"type": "T_RIGHTPAREN", "content": ")"}
        ]
    },
    {
        "test_name": "Mixed Valid and Invalid Characters",
        "description": "Test mixing valid tokens with unrecognized characters",
        "code": "subject#course",
        "should_succeed": false,
        "expected_error": "Unrecognized character",
        "result": []
    },
    {
        "test_name": "Special Characters Galore",
        "description": "Test lots of special characters that should cause lexer error",
        "code": "@#$%^&*()subject!=course",
        "should_succeed": false,
        "expected_error": "Unrecognized characters",
        "result": []
    }
] 